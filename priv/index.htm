<!-- See LICENSE for licensing information. -->
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>ICE computings visualiser</title>

    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

    <link rel="stylesheet" type="text/css" href="rsc/jquery-ui-1.9.2.custom.css"/>
    <link rel="stylesheet" type="text/css" href="rsc/font-awesome.min.css"/>

    <link rel="stylesheet" type="text/css" href="rsc/bootstrap.min.css"/>
    <link rel="stylesheet" type="text/css" href="rsc/dagre-d3-simple.css"/>
    <link rel="stylesheet" type="text/css" href="rsc/digraph.css"/>

    <script type="text/javascript" src="rsc/jquery-2.0.0.min.js"></script>
    <script type="text/javascript" src="rsc/jquery.form.min.js"></script>
    <script type="text/javascript" src="rsc/d3.min.js"></script>
    <script type="text/javascript" src="rsc/dagre.min.js"></script>
    <script type="text/javascript" src="rsc/dagre-d3-simple.js"></script>

    <script type="text/javascript" src="rsc/tree.json"></script>

    <script src="/static/bullet.js"></script>
    <script type="text/javascript">
    $(document).ready(function(){
        var eons = [];
        var name = 'Icy';
        var bullet;

        var open = function(){
            bullet = $.bullet('ws://localhost:8888/bullet');

            bullet.onopen = function(){
                $('#status').text('online').css({backgroundColor: 'green'});
            };
            bullet.ondisconnect = function(){
                $('#status').text('offline').css({backgroundColor: 'red'});
            };
            bullet.onclose = function(){
                $('#status').text('closed').css({backgroundColor: 'yellow'});
            };

            bullet.onheartbeat = function(){
                console.log('ping: ' + name);
                bullet.send('ping: ' + name);
            };

            // onmessage
            bullet.onmessage = function(e){
                if (e.data != 'pong'){
                    var obj = EON(e.data);
                    eons.push(obj);
                    EONS_print(eons, $('#msg'), "Events recap:\n", '\n');
                }
            };
        };

        open();

        $('.enable').on('click', function(){
            if (bullet == null){
                open();
            } else {
                bullet.close();
                bullet = null;
            }
        });

        $('#tree').on('click', function(){
            console.log(eons);
            var pre = $('#msg');
            var tre = $('#attach');
            if (false === pre.is(':visible')){
                tre.toggle();
                pre.toggle();
                $('html, body').css({overflow: "auto"});
            } else {
                tre.toggle();
                pre.toggle();
                $('html, body').css({overflow: "hidden"});
                dataParsed = TREE_threads(eons);
                // alert(JSON.stringify(dataParsed));
                // var dataParsed = [{ "children": [{ "children": [{ "children": [{ "children": [{ "children": [], "data": { "ne": "O", "pos": "NN", "type": "TK", "word": "Jolie" } }], "data": { "type": "NN" } }], "data": { "type": "NP" } }, { "children": [{ "children": [{ "children": [], "data": { "ne": "O", "pos": "JJ", "type": "TK", "word": "petite" } }], "data": { "type": "JJ" } }, { "children": [{ "children": [], "data": { "ne": "PERSON", "pos": "NN", "type": "TK", "word": "Morue" } }], "data": { "type": "NN" } }], "data": { "type": "NP" } }], "data": { "type": "NP" } }], "data": { "type": "ROOT", word: "root" } }];
                renderText(dataParsed);
            }
        });
        $('#attach').toggle(false);
        // $('#tree').trigger('click');/////////////

    });

    function EON (e_string) { // Erlang Object Notation :d
        var obj = $.parseJSON(eval(e_string));
        console.log('RECV: ' + JSON.stringify(obj));
        return {name: obj["Erlang"]["Tuple"].shift(),
                time: obj["Erlang"]["Tuple"].shift(),
                data: obj["Erlang"]["Tuple"][0]};
    };
    function EONS_print (eons, tag, placeholder, sep) {
        // Sort eons by timestamp
        eons = eons.sort(function(l,r){
            if (l.time < r.time) return -1;
            if (l.time > r.time) return  1;
            return 0;
        });
        tag.text(placeholder);
        eons.forEach(function(obj){
            tag.text(tag.text() + EON_str(obj) + sep);
        });
    };
    function EON_str (obj){ // Was: JSON.stringify(obj);
        var text = JSON.stringify(obj.data);
        // Handle Erlang tuples
        text = text.replace(/{"Tuple":\[/g, '{');
        text = text.replace(/\]}/g, '}');
        text = text.replace(/{"Tuple":""}/g, '{}');
        // Heuristics
        text = text.replace(/""/g, '[]');
        // Note: order of replace-ing matters!
        return obj.name + ' ---> ' + text;
    };

    var TREE_threads = function(eons){
        var isntrs = {};
        eons.forEach(function(eon){
            if (isntrs[eon.name] === null){
                isntrs[eon.name] = [];
            }
            isntrs[eon.name].push(eon.data);
        });

        var TREE_fold = function(Children){
            return [
            {data:{word:"ƒ"}, children:[
                {data:{ne:"NUMBER", word:"Jolie1"}, children:[]},
                {data:{ne:"O", pos:"NN", type:"TK", word:"Jolie"}, children:Children}]}];
        };

        //var root = {data: {type: "ROOT", word: isntrs["tcore"].shift()}, children: []};
        var root = [
            {data:{word:"LOOL"}, children:
                 /*{data:{word:"ƒ"}, children:[
                    {data:{ne:"NUMBER", word:"Jolie1"}, children:[]},
                    {data:{ne:"O", pos:"NN", type:"TK", word:"Jolie"}, children:[
                        {data:{ne:"ORDINAL", pos:"NN", type:"TK", word:"Jolie"}, children:[
                            {data:{ne:"PERSON", pos:"NN", type:"TK", word:"Jolie"}, children:[
                                {data:{ne:"ORGANIZATION", pos:"NN", type:"TK", word:"Jolie5"}, children:[
                                    ]}]}]}]}]}]} */
                TREE_fold(
                    TREE_fold(
                        TREE_fold(
                            [{data:{ne:"ORGANIZATION", pos:"NN", type:"TK", word:"Jolie5"}, children:[]}])))}
        ];
        return root;
        // return [{ "children": [{ "children": [{ "children": [{ "children": [{ "children": [], "data": { "ne": "O", "pos": "NN", "type": "TK", "word": "Jolie" } }], "data": { "type": "NN" } }], "data": { "type": "NP" } }, { "children": [{ "children": [{ "children": [], "data": { "ne": "O", "pos": "JJ", "type": "TK", "word": "petite" } }], "data": { "type": "JJ" } }, { "children": [{ "children": [], "data": { "ne": "PERSON", "pos": "NN", "type": "TK", "word": "Morue" } }], "data": { "type": "NN" } }], "data": { "type": "NP" } }], "data": { "type": "NP" } }], "data": { "type": "ROOT", word: "root" } }];
    };
    </script>

    <style type="text/css">
    header { background-color:lightgreen; text-align:center; height:30px; }
    header > button#status { float:left; height:30px; background-color:cyan; }
    header > button#tree { float:right; height:30px; }
    </style>

</head>
<body>

    <header>
        <button id="status" class="enable">unknown</button>
        <span>I was blind but now Icy!</span>
        <button id="tree">Toggle tree</button>
    </header>

    <table width="100%" height="100%">
        <tbody>
            <tr>
                <td align="center" valign="middle">
<pre id="msg">
Events recap:
</pre>
                </td>
            </tr>
        </tbody>
    </table>

    <script type="text/javascript" src="rsc/make_tree.js"></script>
    <div id="attach">
        <svg class="main-svg" id="svg-canvas"></svg>
    </div>

</body>
</html>
